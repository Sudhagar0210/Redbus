# Pagination With SQL insert

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, ElementClickInterceptedException, StaleElementReferenceException, TimeoutException
import pyodbc


# Database connection
conn = pyodbc.connect('DRIVER={SQL Server};SERVER=Sudhakar\\SQLEXPRESS01;DATABASE=Local_database;UID=sa;PWD=123')

driver = webdriver.Chrome()
driver.maximize_window()

driver.get('https://www.redbus.in/')

time.sleep(3)


# # Click the State Header
element = driver.find_element(By.XPATH, "//*[@id=\"Carousel\"]/span/span/i")
element.click()
time.sleep(2)
element.click()
time.sleep(2)
element.click()

# State Name 
state_name_details = driver.find_element(By.XPATH, "(//div[@class='rtcName'])[10]")  # Need to change index Number based on State Name Click
State_name = state_name_details.text  

# Select State Name
time.sleep(3)
#driver.find_element(By.XPATH,"(//img[@class='rtcLogo'])[3]").click()
driver.find_element(By.XPATH, "(//div[@class='rtcName'])[10]").click()
driver.implicitly_wait(3)

time.sleep(2)

def scroll_to_bottom():
    last_height = driver.execute_script("return document.body.scrollHeight")
    while True:
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(4)
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            break
        last_height = new_height

def get_bus_details(State_name):
    route_titles = driver.find_elements(By.XPATH, "//*[@id=\"mBWrapper\"]/section/div[1]/ul/li/a")
    bus_details = driver.find_elements(By.XPATH, "//div[@class='clearfix bus-item-details']")

    for route in route_titles:
        Route_name = route.text
        Route_link = route.get_attribute('href')
    
    for bus in bus_details:
        try:
            Bus_name = bus.find_element(By.XPATH, ".//div[contains(@class, 'travels')]").text
            Bus_type = bus.find_element(By.XPATH, ".//div[contains(@class, 'bus-type')]").text
            Departure_time = bus.find_element(By.XPATH, ".//div[contains(@class, 'dp-time')]").text
            Arrival_time = bus.find_element(By.XPATH, ".//div[contains(@class, 'bp-time')]").text
            Duration = bus.find_element(By.XPATH, ".//div[contains(@class, 'dur')]").text
            try:
                Rating = bus.find_element(By.XPATH, ".//div[contains(@class, 'rating')]").text 
            except NoSuchElementException:
                Rating = "N/A"

            Fare = bus.find_element(By.XPATH, ".//div[contains(@class, 'fare')]//span").text
            Seats_available = bus.find_element(By.XPATH, ".//div[contains(@class, 'seat-left')]").text

            data_to_insert = (
                State_name,
                Route_name,
                Route_link,
                Bus_name,
                Bus_type,
                Departure_time,
                Arrival_time,
                Duration,
                Rating,                           
                Fare,
                Seats_available
            )
        
            # Create SQL INSERT statement
            sql_insert = """
            INSERT INTO Redbus (State_name,Route_name, Route_link, Bus_name, Bus_type, Departure_time, Arrival_time, Duration, Rating, Fare, Seats_available)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """
            
            # Execute SQL INSERT statement
            cursor = conn.cursor()
            cursor.execute(sql_insert, data_to_insert)
            conn.commit()

        except NoSuchElementException as e:
            print(f"Error fetching some details: {e}")

def go_to_page(page_number, isPage):
    print (page_number, "Page_Number")
    isPage = True
    try:
        page_button = WebDriverWait(driver, 10). until(
            EC. element_to_be_clickable((By.XPATH, f"//div[text()='{page_number}']"))
        )                                
                                                                
        driver.execute_script("arguments[0].scrollIntoView();", page_button)
        time.sleep(2)
        page_button.click()
        WebDriverWait(driver, 10).until(EC.staleness_of(page_button))
    except (NoSuchElementException,ElementClickInterceptedException,TimeoutException) as e:
        print(f"Inserting page {page_number}: {e}")

def fetch_route_titles():
    return driver.find_elements(By.XPATH, "//a[@class='route']")

def pageData(isPage):
    page = 1
    while isPage:
        route_titles = fetch_route_titles()
        if not route_titles:
            break

        for i in range(len(route_titles)):
            try:
                # route_name = route_titles[i].text
                # route_link = route_titles[i].get_attribute('href')                
                # print(f"Clicking on route {i + 1} on page {page}")
                time.sleep(2)
                driver.execute_script("arguments[0].scrollIntoView();", route_titles[i])
                driver.execute_script("window.scrollBy(0,-100);")
                time.sleep(2)
                try:
                    driver.execute_script("arguments[0].click();", route_titles[i])
                except (ElementClickInterceptedException, NoSuchElementException, StaleElementReferenceException, TimeoutException):
                    time.sleep(2)
                    driver.execute_script("arguments[0].click();", route_titles[i])
                time.sleep(2)
                scroll_to_bottom()
                #get_bus_details(route_name, route_link)
                get_bus_details(state_name)
                time.sleep(2)
                driver.back()
                time.sleep(2)
                driver.back()

                # Refresh the route titles after navigating back
                route_titles = fetch_route_titles()
            except StaleElementReferenceException:
                print(f"StaleElementReferenceException encountered for item {i}, refreshing list.")
                route_titles = fetch_route_titles()
                continue

        page += 1
        if page == 6:  # Need to change based on available Pages         
            isPage = False 
            break
        go_to_page(page, isPage)


# Call the main function with initial
isPage = True
pageData(isPage)


# Close the database connection
conn.close()

# Close Driver
driver.quit()

